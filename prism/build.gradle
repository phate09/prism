plugins {
    id 'io.franzbecker.gradle-lombok' version '2.0'
    id "com.google.protobuf" version "0.8.10"
    id 'java'
}
group 'prism'
version '1.0-SNAPSHOT'

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
    maven {
        name = 'commons-math3'
        url = 'https://mvnrepository.com/artifact/org.apache.commons/commons-math3'
    }
    maven {
        name = 'commons-math4'
        url = 'https://mvnrepository.com/artifact/org.apache.commons/commons-math4'
    }
}
dependencies {

//    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10' //protobuf plugin dependency

    // Local dependencies
    compile fileTree(dir: 'lib', include: '*.jar')

    // Downloadable dependencies
    compile 'com.google.code.gson:gson:2.8.0' //json parser
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.9.1' //protobuf implementation
    compile group: 'com.google.protobuf', name: 'protobuf-gradle-plugin', version: '0.8.10' //protobuf compile command from gradle
    compile group: 'org.json', name: 'json', version: '20190722' //json
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1' //math functions
    compile "org.apache.commons:commons-csv:1.5"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'org.jscience', name: 'jscience', version: '4.3.1'
    compile group: 'org.zeromq', name: 'jeromq', version: '0.5.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compileOnly 'org.projectlombok:lombok:1.18.6'//reduce boilerplate code in java
    annotationProcessor 'org.projectlombok:lombok:1.18.6' //reduce boilerplate code in java (enable in IDE)
    compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'//utilities from google
    compile group: 'me.tongfei', name: 'progressbar', version: '0.7.3'//progressbar
    compile group: 'com.opencsv', name: 'opencsv', version: '4.1' //export to csv
    compile group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1' //py4j
    compile group: 'com.datumbox', name: 'lpsolve', version: '5.5.2.0'


}
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        proto {
            srcDir 'proto'
        }
        resources {
            srcDirs = ['lib']
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}
protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // Generates Python code in the output folder:
                python {}

                // If you wish to avoid generating Java files:
//                remove java
            }
        }
    }
}
task runDTMCModelGeneratorPython(type: JavaExec) {
    // Executable jars can have only _one_ jar on the classpath.
    main = 'server.DTMCModelGeneratorPython'
    classpath = sourceSets.main.runtimeClasspath
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        environment("DYLD_LIBRARY_PATH", "$projectDir/lib")
    } else {
        environment("LD_LIBRARY_PATH", "$projectDir/lib")
    }
}
task runCartpoleModelGeneratorPython(type: JavaExec) {
    // Executable jars can have only _one_ jar on the classpath.
    main = 'server.CartpoleModelGeneratorPython'
    classpath = sourceSets.main.runtimeClasspath
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        environment("DYLD_LIBRARY_PATH", "$projectDir/lib")
    } else {
        environment("LD_LIBRARY_PATH", "$projectDir/lib")
//        environment("LD_PRELOAD", "libufs.so")
    }
}
run{
    main = 'server.CartpoleModelGeneratorPython'
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        environment("DYLD_LIBRARY_PATH", "$projectDir/lib")
    } else {
        environment("LD_LIBRARY_PATH", "$projectDir/lib")
    }
}
run{
    main = 'server.MdpAbstract'
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        environment("DYLD_LIBRARY_PATH", "$projectDir/lib")
    } else {
        environment("LD_LIBRARY_PATH", "$projectDir/lib")
    }
}
// Set a main class so we can use the 'Application' plugin to create distributions / launch scripts
mainClassName = 'server.MdpAbstract'

startScripts {
    doLast {
        String libdir = "$projectDir/lib/prism"
        String extendClasspath = 'if [ \"$EXTRACLASSPATH\" != \"\" ]; then\n    CLASSPATH=\"$EXTRACLASSPATH:$CLASSPATH\"\nfi'
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            unixScript.text = unixScript.text.replace('# Collect ', extendClasspath + "\n\n" + "export DYLD_LIBRARY_PATH=" + libdir + "\n\n# Collect ")
        } else {
            unixScript.text = unixScript.text.replace('# Collect ', "export LD_LIBRARY_PATH=" + libdir + "\n\n# Collect ")
        }
        //windowsScript.text = "PATH = ..." + windowsScript.text
    }
}
